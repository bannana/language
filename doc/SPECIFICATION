                             Detailed Specification for
                                  Various Componets

                           Paul Longtine (paul@nanner.co)

OVERVIEW
    This language will look and feel like any other normal, ordinary language.
The goal is not to innovate, but to see if _I_ can. This is a personal refuge
before my inevitable contributions to large group projects where individuals
are deemed inferior.

 SYNTAX
    #TO BE DETERMINED#

 TYPES

    The following types are paraphrased to give you a breif overview:
 0 VOID    - Null, no data
 1 ADDR    - Address type (bytecode)
 2 TYPE    - A `type` type
 3 PLIST   - Parameter list
 4 FUNC    - Function
 5 OBJECT  - Object/Class
 6 G_INT   - Generic integer
 7 G_FLOAT - Generic double
 8 G_CHAR  - Generic character
 9 G_STR   - Generic string
10 S_ARRAY - Static array
11 D_ARRAY - Dynamic array
12 H_TABLE - Hashtable
13 G_FIFO  - Stack

 RUNTIME

    The runtime architecture is based off of stack machines. If you don't know
about stack machines, go refresh yourself on stack machines along with basic
computer architecture / turing machines. Then come back here, I'm not explaining
that stuff for you.

--------------------------------------------------------------------------------
General Architecture Overview
--------------------------------------------------------------------------------
RUNTIME ELEMENTS

    RUNTIME CONTEXT DEFINITION

The runtime context keeps track of a invidual threads metadata, such as:

 * The operating stack
    The operating stack where current running instructions push/pop to.
    - refer to STACK DEFINITION

 * Namespace instance
    Data structure that holds the references to variable containers, also provi
    ing the interface for Namespace Levels.
    - refer to NAMESPACE DEFINITION

 * Arguement stack
    Arguements to function calls are pushed on to this stack, flushed on call.
    - refer to STACK DEFINITION, FUNCTION DEFINTION

 * Program counter
    An interface around bytecode to keep track of traversing line-numbered
    instructions.
    - refer to PROGRAM COUNTER DEFINITION

This context gives definition to an 'environment' where code is executed.

    NAMESPACE DEFINITION

A key part to any operational computer language is the notion of a 'Namespace'.
This notion of a 'Namespace' refers to the ability to declare a name, along with
needed metadata, and call upon the same name to retrieve the values assosaited
with that name.

In this definition, the namespace will provide the following key mechanisms:

 * Declaring a name

 * Assigning a name to a value

 * Retreiving a name's value

 * Handle a name's scope

 * Implicitly move in/out of scopes

Scopes are handled by referencing to either the Global Scope or the Local Scope.
The Local Scope is denoted by '1' in the scope arguement when refering to names,
and this scope is initialized when evaluating any new block of code. When a diff
erent block of code is called, a new scope is added as a new Namespace level.
Namespace levels act as context switches within function contexts. For example,
the local namespace must be 'returned to' if that local namespace context needs
to be preserved on return. Pushing 'Namespace levels' ensures that for every n
function calls, you can traverse n instances of previous namespaces.
For example, take this namespace level graphic, where each Level is a namespace
instance:

 Level 0: Global namespace, denoted by '0'.
 Level 1: Namespace level, where Local Level is at 1, denoted by '1'.

When a function is called, another namespace level is created and the local
level increases, like so:

 Level 0: Global namespace, denoted by '0'.
 Level 1: Namespace level.
 Level 2: Namespace level, where Local Level is at 2, denoted by '1'.

Global scope names (denoted by a '0' in the scope arguement) are persistient
through the runtime as they handle all function definitions, objects, and
names declared in the global scope. The "Local Level" is at where references
that have a scope arguement of '1' refer to when accessing names.

    VARIABLE DEFINITION

Variables in this definiton provide the following mechanims:

 * Provide a distinguishable area of typed data

 * Provide a generic container around typed data, to allow for labeling

 * Declare a set of fundemental datatypes, and methods to:

   * Allocate the proper space of memory for the given data type,

   * Deallocate the space of memory a variables data may take up, and

   * Set in place a notion of ownership

For a given variable V, V defines the following attributes

    V -> Ownership
    V -> Type
    V -> Pointer to typed space in memory

Each variable then can be handled as a generic container.

In the previous section, the notion of Namespace levels was introduced. Much
like how names are scoped, generic variable containers must communicate their
scope in terms of location within a given set of scopes. This is what is called
'Ownership'. In a given runtime, variable containers can exist in the following
structures: A stack instance, Bytecode arguements, and Namespaces

The concept of ownership differentiates variables existing on one or more of the
structures. This is set in place to prevent accidental deallocation of variable
containers that are not copied, but instead passed as references to these
structures.

    BYTECODE SPEC

Bytecode is organised in the following manner:

    <opcode> (arg 0... (arg n < 3 ) )

Where the <opcode> is a single byte denoting which subroutine to call with the
following arguements when executed.

 Interpreting Bytecode Instructions

    A bytecode instruction is a single-byte opcode, followed by at maximum 3
arguements, which can be in the following forms:

 * Static (single byte)
 * Name (single word)
 * Address (depending on runtime state, usually a word)
 * Dynamic (size terminated by NULL, followed by (size)*bytes of data)
   * i.e. FF FF 00 <0xFFFF bytes of data>,
          01 00 <0x1 bytes of data>,
          06 00 <0x6 bytes of data>, etc

Below is the specification of all the instructions with a short description for
each instruction, and instruction category:
________________________________________________________________________________
OPCODE SPEC
--------------------------------------------------------------------------------
Keywords:
 TOS           - 'Top Of Stack' The top element
 S<[variable]> - Static Arguement.
 N<[variable]> - Name.
 A<[variable]> - Address Arguement.
 D<[variable]> - Dynamic bytecode arguement.
-------------------------------------------------------------------------------
Hex | Memnonic | arguments - description
-------------------------------------------------------------------------------
1 - Stack manipulation

    These subroutines operate on the current-working stack(1).
-------------------------------------------------------------------------------
10 POP S<n>  - pops the stack n times.
11 ROT       - rotates top of stack
12 DUP       - duplicates the top of the stack
13 ROT_THREE - rotates top three elements of stack
-------------------------------------------------------------------------------
2 - Variable management
-------------------------------------------------------------------------------
20 DEC S<scope> S<type> N<ref> - declare variable of type
21 LOV S<scope> N<ref>         - loads reference variable on to stack
22 STV S<scope> N<ref>         - stores TOS to reference variable
23 CTV S<scope> N<ref> D<data> - loads constant into variable
24 CTS D<data>                 - loads constant into stack
-------------------------------------------------------------------------------
3 - Type management

   Types are in the air at this moment. I'll detail what types there are when
the time comes
-------------------------------------------------------------------------------
30 TYPEOF              - returns type structure on TOS
                         (used for comparing types)
31 CAST S<type>        - Tries to cast TOS to <type>
-------------------------------------------------------------------------------
4 - Binary Ops
    OPS take the two top elements of the stack, preform an operation and push
the result on the stack.
-------------------------------------------------------------------------------
40 ADD  - adds
41 SUB  - subtracts
42 MULT - multiplies
43 DIV  - divides
44 POW  - power, TOS^TOS1
45 BRT  - base root, TOS root TOS1
46 SIN  - sine
47 COS  - cosine
48 TAN  - tangent
49 ISIN - inverse sine
4A ICOS - inverse consine
4B ITAN - inverse tangent
4C MOD  - modulus
4D OR   - or's
4E XOR  - xor's
4F NAND - and's
-------------------------------------------------------------------------------
5 - Conditional Expressions

    Things for comparison, < > = ! and so on and so forth.
Behaves like Arithmetic instructions, besides NOT instruction. Pushes boolean
to TOS
-------------------------------------------------------------------------------
50 GTHAN - Greather than
51 LTHAN - Less than
52 EQ    - Equal to
53 NOT   - Inverts TOS if TOS is boolean
54 OR    - Boolean OR
55 AND   - Boolean AND
-------------------------------------------------------------------------------
6 - Loops
-------------------------------------------------------------------------------
60 STARTL - Start of loop
61 CLOOP  - Conditional loop. If TOS is true, continue looping, else break
6E BREAK  - Breaks out of loop
6F ENDL   - End of loop
-------------------------------------------------------------------------------
7 - Code flow

    These instructions dictate code flow.
-------------------------------------------------------------------------------
70 GOTO A<addr> - Goes to address
71 JUMPF A<n>   - Goes forward <n> lines
72 IFDO         - If TOS is TRUE, do until done, if not, jump to done
73 ELSE         - Chained with an IFDO statement, if IFDO fails, execute ELSE
                  block until DONE is reached.
7E DONE         - End of block
7F CALL N<ref>  - Calls function, pushes return value on to STACK.
-------------------------------------------------------------------------------
8 - Manipulating High-order Object Variables

    For arrays, key-value arrays, etc
-------------------------------------------------------------------------------
80 PUSH         - Push TOS on to TOS1, expects TOS1 to be an object hat
                supports the scheme.

81 DEL          - Delete element in structure at TOS (assumes index of
                sorts) for <ref> object.

82 GET          - Gets key, TOS must be a keyed datastructure, and TOS1 must be
                a string that is a key in TOS.

83 GETP N<ref>  - Get property of <ref> in object contained in TOS. pushes
                to stack

84 CALLM N<ref> - Call method of <ref> in object contained in TOS. Uses
                arguement stack
-------------------------------------------------------------------------------
F - Functions/classes
-------------------------------------------------------------------------------
FF DEFUN N<ref> S<type> D<args> - Un-funs everything. no, no- it defines a
                                  function. D<ref> is its name, S<type> is the
                                  return value, D<args> is the args.

FE DECLASS N<ref> D<args>       - Defines a class.

F1 NEW N<ref>                   - Instantiates class

F0 RETURN                       - Returns from function
-------------------------------------------------------------------------------
0 - SPECIAL BYTES
-------------------------------------------------------------------------------
00 NULL          - Terminator byte

01 SYNC S<level> - Updates global namespace with global namespace cache of
                   current thread

02 PRINT         - Prints whatever is on the TOS.

03 FREE          - Pops & Deletes TOS

0E ARGB          - Builds arguement stack

0F LIBC A<ref>   - Library call

_______________________________________________________________________________
COMPILER/TRANSLATOR/ASSEMBLER SHINDIGS
--------------------------------------------------------------------------------

LEXICAL ANALYSIS

    Going from code to bytecode is what this section is all about. First off an
abstract notation for the code will be broken down into a binary tree as so:

                                    <node>
                                      /\
                                     /  \
                                    /    \
                                  <arg> <next>

    <node> can be an argument of its parent node, or the next instruction.
Instruction nodes are nodes that will produce an instruction, or multiple based
on the bytecode interpretation of its instruction. For example, this line of
code:

                                   int x = 3

    would translate into:
                                      def
                                       /\
                                      /  \
                                     /    \
                                    /      \
                                   /        \
                                 int        set
                                 /\          /\
                                /  \        /  \
                              null 'x'    'x'  null
                                          /\
                                         /  \
                                       null  3

    Functions are expressed as individual binary trees. The root of any file is
treated as an individual binary tree, as this is also a function.

    The various instruction nodes are as follows:

 * def <type> <name>
   - Define a named space in memory with the type specified
   - See the 'TYPES' section under 'OVERVIEW'
 * set <name> <value>
   - Set a named space in memory with value specified

                    Going from Binary Trees to Bytecode

    The various instruction nodes within the tree will call specific functions
that will take arguemets specified and lookahead and lookbehind to formulate the
correct bytecode equivilent.
